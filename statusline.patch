--- statusline.rs.orig	2025-08-22 20:56:19.078926850 -0700
+++ statusline.rs	2025-08-22 21:11:55.918827406 -0700
@@ -1,5 +1,4 @@
-use serde::{Deserialize, Serialize};
-use std::collections::HashMap;
+use serde::Deserialize;
 use std::env;
 use std::io::{self, Read};
 use std::process::Command;
@@ -48,6 +47,7 @@
     const CYAN: &'static str = "\x1b[36m";
     const GREEN: &'static str = "\x1b[32m";
     const GRAY: &'static str = "\x1b[90m";
+    const WHITE: &'static str = "\x1b[37m";
     const RED: &'static str = "\x1b[31m";
     const ORANGE: &'static str = "\x1b[38;5;208m";
     const YELLOW: &'static str = "\x1b[33m";
@@ -95,15 +95,17 @@
         Self { percentage }
     }

-    fn color(&self) -> &'static str {
+    fn color(&self, is_dark_theme: bool) -> &'static str {
         if self.percentage >= 90.0 {
             Colors::RED
         } else if self.percentage >= 70.0 {
             Colors::ORANGE
         } else if self.percentage >= 50.0 {
             Colors::YELLOW
+        } else if is_dark_theme {
+            Colors::WHITE  // White for dark theme
         } else {
-            Colors::GRAY
+            Colors::GRAY   // Gray for light theme
         }
     }

@@ -125,10 +127,6 @@
 }

 impl GitStatus {
-    fn is_empty(&self) -> bool {
-        self.added == 0 && self.modified == 0 && self.deleted == 0 && self.untracked == 0
-    }
-
     fn format(&self) -> String {
         let mut result = String::new();
         if self.added > 0 {
@@ -305,6 +303,10 @@
     let _short_mode = args.contains(&"--short".to_string());
     let _show_pr_status = !args.contains(&"--skip-pr-status".to_string());

+    // Detect theme from environment variable (defaults to dark)
+    let theme = env::var("STATUSLINE_THEME").unwrap_or_else(|_| "dark".to_string());
+    let is_dark_theme = theme != "light";
+
     // Read JSON input from stdin
     let mut input_json = String::new();
     io::stdin().read_to_string(&mut input_json)?;
@@ -327,11 +329,11 @@

             model_display.push_str(&format!(
                 " {}â€¢ {}{}{} {}{}",
-                Colors::GRAY,
-                usage.color(),
+                if is_dark_theme { Colors::LIGHT_GRAY } else { Colors::GRAY },
+                usage.color(is_dark_theme),
                 pct_str,
                 "%",
-                Colors::GRAY,
+                Colors::CYAN,
                 model_type.abbreviation()
             ));

